// Code generated by protoc-gen-go-cel-validate. DO NOT EDIT.
// versions:
//  protoc-gen-go-cel-validate	{{PluginVersion}}
//  protoc						{{ProtocVersion}}
// source: {{.Desc.Path}}

package {{.GoPackageName}}

{{$file := .}}

var (
    _{{.GoDescriptorIdent.GoName}}_rawValidateOptions = []byte{
        {{ range $i, $value := (protoMarshal .Config) -}}
        {{ printf "0x%02x, " $value}}{{- if and $i (mod $i 16) }}{{print "\n"}}{{end}}
        {{- end }}
    }
    _{{.GoDescriptorIdent.GoName}}_validateOptions = &{{validate "ValidateOptions"}}{}
)

func init() {
    if err := {{proto "Unmarshal"}}(_{{$file.GoDescriptorIdent.GoName}}_rawValidateOptions, _{{.GoDescriptorIdent.GoName}}_validateOptions); err != nil {
        panic(err)
    }
}

func _{{.GoDescriptorIdent.GoName}}_getValidateImports() []{{protoreflect "FileDescriptor"}} {
    imports := []{{protoreflect "FileDescriptor"}}{}
    for i := 0; i < {{.GoDescriptorIdent.GoName}}.Imports().Len(); i++ {
        imports = append(imports, {{.GoDescriptorIdent.GoName}}.Imports().Get(i))
    }
    return imports
}

{{ range $s := .Services }}
func New{{.GoName}}ValidateProgram(opts ...{{cel "EnvOption"}}) ({{validate "ServiceValidateProgram"}}, error) {
    if m, err := {{validate "BuildServiceValidateProgram"}}(
        _{{$file.GoDescriptorIdent.GoName}}_validateOptions, 
        {{$file.GoDescriptorIdent.GoName}}.Services().Get({{$s.Desc.Index}}), 
        {{cel "Lib"}}(&{{options "Library"}}{EnvOpts: opts}), 
        _{{$file.GoDescriptorIdent.GoName}}_getValidateImports()...,
    ); err != nil {
        return nil, err
    } else {
        return m, nil
    }
}
{{- end}}

{{range $messageNo,$m := .Messages}}
{{if $m.ContainsValidatePrograms}}
var (
    _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_validateProgram {{validate "MessageValidateProgram"}} = nil
	_{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_validateProgramOnce {{sync "Once"}}
)

func (m *{{$m.GoIdent.GoName}}) Validate(ctx {{context "Context"}}, opts ...{{cel "EnvOption"}}) error {
    return m.ValidateWithMask(ctx, &{{fieldmaskpb "FieldMask"}}{
        Paths: []string{"*"},
    })
}

func (m *{{$m.GoIdent.GoName}}) ValidateWithMask(ctx {{context "Context"}}, fm *{{fieldmaskpb "FieldMask"}}, opts ...{{cel "EnvOption"}}) error {
    _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_validateProgramOnce.Do(func() {
        m, err := {{validate "BuildMessageValidateProgram"}}(
            _{{$file.GoDescriptorIdent.GoName}}_validateOptions, 
            m.ProtoReflect().Descriptor(), 
            {{cel "Lib"}}(&{{options "Library"}}{EnvOpts: opts}), 
            _{{$file.GoDescriptorIdent.GoName}}_getValidateImports()...,
        ); 
        if err == nil {
            _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_validateProgram = m
        }
    })
    if  _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_validateProgram != nil {
        return _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_validateProgram.ValidateWithMask(ctx, m, fm)
    }
    return nil
}
{{else}}
func (m *{{$m.GoIdent.GoName}}) Validate(ctx {{context "Context"}}) error {
	return nil
}

func (m *{{$m.GoIdent.GoName}}) ValidateWithMask(ctx {{context "Context"}}, fm *{{fieldmaskpb "FieldMask"}}) error {
    return nil
}
{{end}}
{{end}}