// Code generated by protoc-gen-go-cel-validate. DO NOT EDIT.
// versions:
//  protoc-gen-go-cel-validate	{{PluginVersion}}
//  protoc						{{ProtocVersion}}
// source: {{.Desc.Path}}

package {{.GoPackageName}}

{{$file := .}}

var _{{.GoDescriptorIdent.GoName}}_rawValidateOptions = []byte{
    {{ range $i, $value := (protoMarshal .Config) -}}
    {{ printf "0x%02x, " $value}}{{- if and $i (mod $i 16) }}{{print "\n"}}{{end}}
    {{- end }}
}

{{ range $s := .Services }}
func New{{.GoName}}ValidateInterceptor(opts ...{{cel "EnvOption"}}) ({{validate "ValidateInterceptor"}}, error) {
    cfg := &{{validate "ValidateOptions"}}{}
    if err := {{proto "Unmarshal"}}(_{{$file.GoDescriptorIdent.GoName}}_rawValidateOptions,cfg); err != nil {
        return nil, err
    }
    if m, err := {{validate "BuildServiceValidateProgram"}}(cfg, {{$file.GoDescriptorIdent.GoName}}.Services().Get({{$s.Desc.Index}}), {{cel "Lib"}}(&{{options "Library"}}{EnvOpts: opts})); err != nil {
        return nil, err
    } else {
        return {{validate "NewValidateInterceptor"}}(m), nil
    }
}
{{- end}}

{{range $messageNo,$m := .Messages}}
{{$buildValidate := false}}
{{range $fieldNo, $f := $m.Fields }}
	{{if or $f.FieldRule $f.HasResourceReference $f.HasFieldBehaviorRequired}}
		{{$buildValidate = true}}
	{{end}}
{{end}}
{{if $buildValidate}}
var (
    _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_celValidateMap map[string]*{{validate "Program"}} = nil
	_{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_celValidateMapOnce {{sync "Once"}}
)

func (m *{{$m.GoIdent.GoName}}) Validate(ctx {{context "Context"}}, opts ...{{cel "EnvOption"}}) error {
    return m.ValidateWithMask(ctx, &{{fieldmaskpb "FieldMask"}}{
        Paths: []string{"*"},
    })
}

func (m *{{$m.GoIdent.GoName}}) ValidateWithMask(ctx {{context "Context"}}, fm *{{fieldmaskpb "FieldMask"}}, opts ...{{cel "EnvOption"}}) error {
    _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_celValidateMapOnce.Do(func() {
        cfg := &{{validate "ValidateOptions"}}{}
        if err := {{proto "Unmarshal"}}(_{{$file.GoDescriptorIdent.GoName}}_rawValidateOptions,cfg); err != nil {
            return
        }
        tmp := map[string]*{{validate "Program"}}{}
        for k, v := range map[string]struct{
            exprs []string
            req {{proto "Message"}}
        }{
            {{range $f := $m.Fields -}}
            "{{$f.Desc.TextName}}": {
                    exprs: []string{
                    {{- if $f.HasResourceReference -}}
                        `{{$f.GetResourceReferenceValidate}}`,
                    {{- end}}
                    {{- if $f.FieldRule -}}
                        {{- if $f.FieldRule.Expr -}}
                        `{{$f.FieldRule.Expr}}`,
                        {{- end}}
                        {{if $f.FieldRule.Exprs -}}
                        {{ range $e := $f.FieldRule.Exprs }}`{{$e}}`,{{end}}
                        {{- end}}
                    {{- end}}
                },
                req: m,
            },
            {{end}}
        }{
            if pgr, err := {{validate "BuildValidateProgram"}}(v.exprs, cfg, v.req.ProtoReflect().Descriptor(), {{cel "Lib"}}(&{{options "Library"}}{EnvOpts: opts})); err != nil {
                return
            } else {
                tmp[k] = pgr
            }
        }
        _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_celValidateMap = tmp
    })
    {{- if .Config.RequiredSupportDisabled}}
    return {{validate "ValidateWithMask"}}(ctx, m, fm, _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_celValidateMap, false)
    {{else}}
    return {{validate "ValidateWithMask"}}(ctx, m, fm, _{{$.GoDescriptorIdent.GoName}}_{{$m.GoIdent.GoName}}_celValidateMap, true)
    {{end -}}
}
{{else}}
func (m *{{$m.GoIdent.GoName}}) Validate(ctx {{context "Context"}}) error {
	return nil
}

func (m *{{$m.GoIdent.GoName}}) ValidateWithMask(ctx {{context "Context"}}, fm *{{fieldmaskpb "FieldMask"}}) error {
    return nil
}
{{end}}
{{end}}